blueprint:
  name: Vacuum
  description: Controls a vacuum based on occupancy
  domain: automation
  input:
    vacuum_entity:
      name: Vacuum
      description: The vacuum to control
      selector:
        entity: 
          domain: 
            - vacuum
    leave_entities:
      name: Start people
      description: Start when these people leave
      selector:
        entity:
          domain:
            - person
          multiple: true
    arrival_entities:
      name: Stop people
      description: Stop when these people arrive
      selector:
        entity:
          domain:
            - person
          multiple: true
    run_once:
      name: Run once per day
      description: Don't run the automation more than once per day
      selector:
        boolean: {}
      default: true
    before_time:
      name: Do not run before
      description: Disallow automation if triggered before this time (HH:MM, 24-hour format)
      selector:
        time: {}
      default: "00:00"
    run_periodically:
      name: Run periodically
      description: Run the vacuum if it hasn't been run in x days. Set to 0 to disable
      selector:
        number:
          min: 0
          max: 14
          step: 1          
      default: 3
    guest_mode:
      name: Trigger while in guest mode
      description: If enabled, the automation can be triggered when guest mode is on
      selector:
        boolean: {}
      default: false

variables:
  guest_mode: !input guest_mode
  run_once: !input run_once
  run_periodically: !input run_periodically
  before_time: !input before_time

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input arrival_entities
    to: 'home'
    id: 'someone_arrives'

  - platform: state
    entity_id: !input leave_entities
    from: 'home'
    to: 'not_home'
    id: 'someone_leaves'

  - platform: state
    entity_id: schedule.periodic_vacuum_check
    from: 'off'
    to: 'on'
    id: 'periodic_schedule'

condition:
  # guest mode constraint
  - condition: or
    conditions:
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
      - "{{ guest_mode == true }}"

  # run once constraint
  - condition: or
    conditions:
      - condition: trigger
        id: 'someone_arrives'
      - "{{ run_once == false }}"
      - condition: and
        conditions:
          - "{{ run_once == true }}"
          - "{{ state_attr(this.entity_id, 'last_triggered') | default(today_at(), true) < today_at('06:00') }}"
 
  # Disable before a certain time
  - condition: template
    value_template: "{{ now().strftime('%H:%M') >= before_time }}"

action:
  - choose:
    # Someone arrives
    - conditions:
        - condition: trigger
          id: 'someone_arrives'
      
      sequence:
        - if:
            - condition: state
              entity_id: !input vacuum_entity
              state: cleaning
          then:
            - service: vacuum.return_to_base
              target:
                entity_id: !input vacuum_entity
          else:
            - service: vacuum.stop
              target:
                entity_id: !input vacuum_entity

    # Start the vacuum
    - conditions:
        - condition: or
          conditions:
            - condition: trigger
              id: 'someone_leaves'
            - condition: and
              conditions:
                - condition: trigger
                  id: 'periodic_schedule'
                - condition: template
                  value_template: "{{ run_periodically > 0 }}"
                - condition: template
                  value_template: "{{ state_attr(this.entity_id, 'last_triggered') | default(today_at(), true) < (now() + timedelta(days=-3)) }}"

      sequence:
        - if:
            - condition: state
              entity_id: !input vacuum_entity
              state: docked
          then:
            - service: vacuum.start
              target: 
                entity_id: !input vacuum_entity
