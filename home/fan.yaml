blueprint:
  name: Fan
  description: Controls a fan based on temperature and, optionally, occupancy.
  domain: automation
  input:
    fan_entity:
      name: Fan
      description: The fan to control
      selector:
        entity: 
          domain: 
            - fan
    ambient_temperature_sensor:
      name: Ambient temperature sensor
      description: The sensor to use for the ambient temperature
      default:
      selector:
        entity:
          domain:
            - sensor
            - group
          device_class: temperature
    turn_on_temperature:
      name: Turn on temperature
      description: The fan will turn on if the temperature is above this value
      default: 72      
      selector:
        number:
          min: 50
          max: 85
          step: 1
          unit_of_measurement: °F
          mode: slider
    turn_off_temperature:
      name: Turn off temperature
      description: The fan will turn off if the temperature is below this value
      default: 70
      selector:
        number:
          min: 50
          max: 85
          step: 1
          unit_of_measurement: °F
          mode: slider
    occupancy_mode:
      name: Check for occupancy
      description: If enabled, the automation will check for occupancy before turning on the fan
      selector:
        boolean: {}
      default: false          
    occupancy_sensor_entity:
      name: Occupancy sensor
      description: Sensor that triggers the fan
      default: {}
      selector:
        entity:
          domain:
            - binary_sensor
            - group
    guest_mode:
      name: Trigger while in guest mode
      description: If enabled, the automation can be triggered when guest mode is on
      selector:
        boolean: {}
      default: false
    home_occupancy:
      name: Trigger while home is not occupied
      description: If enabled, the automation can be triggered when the home is not occupied and the fan will not turn off when the home is not occupied
      selector:
        boolean: {}
      default: false
    quiet_mode:
      name: Trigger while in quiet mode
      description: If enabled, the automation can be triggered when quiet mode is on and the fan will not turn off when quiet mode turns on
      selector:
        boolean: {}
      default: false

variables:  
  ambient_temperature_sensor: !input ambient_temperature_sensor
  fan_entity: !input 'fan_entity'
  guest_mode: !input guest_mode
  home_occupancy: !input home_occupancy
  occupancy_mode: !input occupancy_mode
  occupancy_sensor_entity: !input occupancy_sensor_entity  
  quiet_mode: !input quiet_mode  

mode: restart
max_exceeded: silent

trigger_variables:
  occupancy_mode: !input occupancy_mode
  occupancy_sensor_entity: !input occupancy_sensor_entity

trigger:
  - platform: numeric_state
    entity_id: !input ambient_temperature_sensor
    above: !input turn_on_temperature
    id: 'temperature_change'

  - platform: numeric_state
    entity_id: !input ambient_temperature_sensor
    below: !input turn_off_temperature
    id: 'temperature_change'

  - platform: template
    value_template: "{{ (occupancy_mode == true) and (states(occupancy_sensor_entity) == 'off') }}"
    id: 'occupancy_stops'

  - platform: template
    value_template: "{{ (occupancy_mode == true) and (states(occupancy_sensor_entity) == 'on') }}"
    id: 'occupancy_starts'

  - platform: state
    entity_id: input_boolean.home_occupancy
    id: 'home_occupancy_change'

  - platform: state
    entity_id: input_boolean.quiet_mode
    id: 'quiet_mode_change'

condition:
    # guest mode constraint
  - condition: or
    conditions:
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
      - "{{ guest_mode == 'on' }}"

action:    
  - choose:
      # Home is unoccupied
      - conditions:
        - condition: trigger
          id: 'home_occupancy_change'
        - condition: state
          entity_id: input_boolean.home_occupancy
          state: 'off'
        - "{{ home_occupancy == false }}"

        sequence:
          - service: fan.turn_off
            target:
              entity_id: !input fan_entity
      
      # Quiet mode has turned on
      - conditions:
        - condition: trigger
          id: 'quiet_mode_change'
        - condition: state
          entity_id: input_boolean.quiet_mode
          state: 'on'
        - "{{ quiet_mode == false }}"

        sequence:
          - service: fan.turn_off
            data: {}
            target:
              entity_id: !input fan_entity

      # Room is no longer occupied
      - conditions:
        - condition: trigger
          id: 'occupancy_stops'

        sequence:
          - service: fan.turn_off
            data: {}
            target:
              entity_id: !input fan_entity

    default:
      # home occupancy constraint
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.home_occupancy
            state: 'on'
          - "{{ home_occupancy == true }}"

      # quiet mode constraint
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.quiet_mode
            state: 'off'
          - "{{ quiet_mode == true }}"    
          
      - choose:
        - conditions:          
          - condition: numeric_state
            alias: 'Temperature above threshold'
            entity_id: !input ambient_temperature_sensor
            above: !input turn_on_temperature
              
          - condition: or
            conditions:
              - "{{ occupancy_mode == false }}"
              - condition: and
                conditions:
                  - "{{ occupancy_mode == true }}"
                  - "{{ states(occupancy_sensor_entity) == 'on' }}"                

          sequence:
            - if:
              - condition: state
                entity_id: !input fan_entity
                state: 'off'
              then:
                - delay:
                    seconds: 1
                - service: fan.turn_on
                  entity_id: !input fan_entity
                  data:
                    percentage: "{{ state_attr(fan_entity, 'percentage_step') | round(0,'floor',1) }}"

        - conditions:          
          - condition: numeric_state
            alias: 'Temperature below threshold'
            entity_id: !input ambient_temperature_sensor
            below: !input turn_off_temperature
              
          sequence:
            - if:
              - condition: state
                entity_id: !input fan_entity
                state: 'on'
              then:
                - service: fan.turn_off
                  entity_id: !input fan_entity
