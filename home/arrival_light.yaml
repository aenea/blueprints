# Summary:
# This blueprint defines an automation for controlling lights based on occupancy and arrival.
# It includes the following inputs:
# - light_entity: The light to control.
# - arrival_light: Option to turn on the light when someone arrives at night.
# - arrival_entity: People that will trigger the arrival light.
# - guest_mode: Option to allow the automation to trigger when guest mode is on.
# - home_occupancy: Option to trigger the automation based on home occupancy.
# - quiet_mode: Option to allow the automation to trigger when quiet mode is on.
# - turn_off_delay: Amount of time to leave the light on after the triggering sensor turns off.
# - turn_on_brightness: The brightness of the light when turned on.
# - turn_on_transition: Transition time for the light to turn on.
# - ambient_light_mode: Option to use an ambient light sensor to determine if the lights should turn on.
# - ambient_light_limit: The light will not turn on if the local ambient light is above the limit.
# - ambient_light_sensor: The sensor to use for the local ambient light.
# - moonlight_mode: Option to enable moonlight mode.
# - moonlight_brightness: Light brightness during moonlighting.
# - moonlight_color: Option to use color for moonlight.
# - nightlight_mode: Option to enable night light mode.
# - nightlight_brightness: Light brightness during night light mode.
# - arrival_mode: Option to turn on the light when someone arrives at night.
# - home_mode: Option to turn on the light when someone arrives to an unoccupied house at night.
# - maximum_run_time: Maximum amount of time before the switch is turned off.

blueprint:
  name: ArrilvalLight
  description: Controls lights based on occupancy and arrival
  domain: automation
  input:
    # Option to use a sensor to control the lights
    occupancy_mode:
      name: Use a sensor
      description: If enabled, a sensor will be used to control the lights
      default: false
      selector:
        boolean: {}
    # Option to use the sensor only to turn off the light, not turn it on
    only_off_mode:
      name: Do not turn on the light
      description: If enabled, the sensor will only be used to turn off the light, not turn it on
      default: false
      selector:
        boolean: {}
    # The sensor that triggers the light
    occupancy_sensor_entity:
      name: Sensor
      description: Sensor that triggers the light
      default: {}
      selector:
        entity:
          domain:
            - binary_sensor
            - group
    # The light to control
    light_entity:
      name: Light
      description: The light to control
      selector:
        entity: 
          domain: 
            - light
            - switch
          multiple: true
    # Option to turn on the light when someone arrives at night
    arrival_light:
      name: Turn on when someone arrives
      description: If enabled, the light will turn on when someone arrives at night
      selector:
        boolean: {}
      default: false
    # People that will trigger the arrival light
    arrival_entity:
      name: Arrival people
      description: People that will trigger the arrival light
      selector:
        entity:
          domain:
            - person
          multiple: true 
      default: []
    # Option to allow the automation to trigger when guest mode is on
    guest_mode:
      name: Trigger while in guest mode
      description: If enabled, the automation can be triggered when guest mode is on
      selector:
        boolean: {}
      default: false
    # Option to trigger the automation based on home occupancy
    home_occupancy:
      name: Trigger while home is not occupied
      description: If enabled, the automation can be triggered when the home is not occupied
      selector:
        boolean: {}
      default: false
    # Option to allow the automation to trigger when quiet mode is on
    quiet_mode:
      name: Trigger while in quiet mode
      description: If enabled, the sensor automation can be triggered when quiet mode is on
      selector:
        boolean: {}
      default: false
    # Amount of time to leave the light on after the triggering sensor turns off
    turn_off_delay:
      name: Delay time
      description: Amount of time to leave the light on after the triggering sensor turns off
      selector:
        duration: {}
      default:
        minutes: 10
    # The brightness of the light when turned on
    turn_on_brightness:
      name: Brightness
      description: The brightness of the light when turned on
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: "%"
      default: 100
    # Transition time for the light to turn on
    turn_on_transition:
      name: On transition
      description: Transition time for the light to turn on
      selector:
        number:
          min: 0
          max: 30
          mode: slider
          unit_of_measurement: seconds
      default: 0
    # Option to use an ambient light sensor to determine if the lights should turn on
    ambient_light_mode:
      name: Use ambient light
      description: If enabled, an ambient light sensor will be used to determine if the lights should turn on
      default: false
      selector:
        boolean: {}
    # The light will not turn on if the local ambient light is above the limit
    ambient_light_limit:
      name: Ambient light limit
      description: The light will not turn on if the local ambient light is above the limit
      selector:
        number:
          min: 50
          max: 1000
          mode: slider
          unit_of_measurement: lux
      default: 150
    # The sensor to use for the local ambient light
    ambient_light_sensor:
      name: Ambient light sensor
      description: The sensor to use for the local ambient light
      default: {}
      selector:
        entity:
          domain:
            - sensor
            - group
          device_class: illuminance
    # Option to enable moonlight mode
    moonlight_mode:
      name: Moonlight
      description: The light will moonlight
      selector:
        boolean: {}
      default: false
    # Light brightness during moonlighting
    moonlight_brightness:
      name: Moonlight brightness
      description: Light brightness during moonlighting
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: "%"
      default: 5
    # Option to use color for moonlight
    moonlight_color:
      name: Use color for moonlight
      selector:
        boolean: {}
      default: false
    # Option to enable night light mode
    nightlight_mode:
      name: Night light
      description: The light will turn on in quiet mode
      selector:
        boolean: {}
      default: false
    # Light brightness during night light mode
    nightlight_brightness:
      name: Night light brightness
      description: Light brightness during night light mode
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: "%"
      default: 5
     # Option to turn on the light when someone arrives to an unoccupied house at night
    home_mode:
      name: Occupancy light
      description: The light will turn on when someone arrives to an unoccupied house at night
      selector:
        boolean: {}
      default: false
    # Maximum amount of time before the switch is turned off
    maximum_run_time:
      name: Maximum run time
      description: Maximum amount of time before the switch is turned off
      selector:
        duration: {}
      default:
        hours: 8
    # Doors that will turn off the light when opened
    door_entities:
      name: Doors
      description: Doors that will turn off the arrival light when opened
      selector:
        entity:
          domain:
            - binary_sensor
          multiple: true

variables:
  ambient_light_limit: !input ambient_light_limit
  ambient_light_mode: !input ambient_light_mode
  ambient_light_sensor: !input ambient_light_sensor
  guest_mode: !input guest_mode
  home_occupancy: !input home_occupancy
  light_entity: !input light_entity
  moonlight_brightness: !input moonlight_brightness
  moonlight_color: !input moonlight_color
  moonlight_mode: !input moonlight_mode
  nightlight_mode: !input nightlight_mode
  occupancy_mode: !input occupancy_mode
  only_off_mode: !input only_off_mode
  arrival_light: !input arrival_light
  arrival_entity: !input arrival_entity
  door_entities: !input door_entities

mode: restart
max_exceeded: silent

trigger_variables:
  t_occupancy_mode: !input occupancy_mode
  t_occupancy_sensor_entity: !input occupancy_sensor_entity

trigger:
  # Trigger when occupancy starts
  - platform: template
    value_template: "{{ t_occupancy_mode == true and (states(t_occupancy_sensor_entity) == 'on') }}"
    id: 'occupancy_starts'

  # Trigger when moonlight mode turns on
  - platform: state
    entity_id: input_select.home_lighting_mode
    from: 'normal'
    to: 'moonlight'
    id: 'moonlight_on'

  # Trigger when moonlight mode turns off
  - platform: state
    entity_id: input_select.home_lighting_mode
    from: 'moonlight'
    to: 'normal'
    id: 'moonlight_off'

  # Trigger when quiet mode turns on
  - platform: state
    entity_id: input_select.home_lighting_mode
    not_from: 'quiet'
    to: 'quiet'
    id: 'quietmode_on'

  # Trigger when quiet mode turns off
  - platform: state
    entity_id: input_select.home_lighting_mode
    from: 'quiet'
    not_to: 'quiet'
    id: 'quietmode_off'

  # Trigger when someone arrives
  - platform: state
    entity_id: !input arrival_entity
    to: 'home'
    id: 'arrival'

  # Trigger when doors are opened
#  - platform: state
#    entity_id: !input door_entities
#    to: 'on'
#    id: 'door_opened'

condition:
  # Guest mode constraint
  - condition: or
    conditions:
      - "{{ states('input_boolean.guest_mode') == 'off' }}"
      - "{{ guest_mode == 'on' }}"

action:
  - choose:
    # Moonlight mode has turned on
    - conditions:
      - condition: trigger
        id: 'moonlight_on'
      - condition: state
        entity_id: !input light_entity
        state: 'off'
      - "{{ moonlight_mode == true }}"
      sequence:
        - if:
          - condition: template
            value_template: "{{ moonlight_color == true }}"
          then:
            - service: light.turn_on
              data:
                brightness_pct: "{{ moonlight_brightness }}"
                hs_color:
                  - "{{ range(360)|random }}"
                  - "{{ range(80,101)|random }}"
                transition: 10
              target:
                entity_id: !input light_entity
          else:
            - service: light.turn_on
              data:
                brightness_pct: "{{ moonlight_brightness }}"
                transition: 10
              target:
                entity_id: !input light_entity
    
    # Moonlight mode has turned off
    - conditions:
      - condition: trigger
        id: 'moonlight_off'
      - condition: state
        entity_id: !input light_entity
        state: 'on'
      - condition: or
        conditions:
          - "{{ occupancy_mode == false }}"
          - condition: and
            conditions:
              - "{{ occupancy_mode == true }}"
              - condition: state
                entity_id: !input occupancy_sensor_entity
                state: 'off'
      - "{{ moonlight_mode == true }}"
      sequence:
        - service: homeassistant.turn_off
          data: {}
          target:
            entity_id: !input light_entity
    
    # Quiet mode has turned on
    - conditions:
      - condition: trigger
        id: 'quietmode_on'      
      sequence:
        - if:
          - condition: template
            value_template: "{{ nightlight_mode == false }}"
          then:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ 'switch.' in light_entity[0] }}"
                  sequence:
                    - service: switch.turn_off
                      data: {}
                      target:
                        entity_id: !input light_entity
              default:
                - service: light.turn_off
                  data:
                    transition: 10
                  target:
                    entity_id: !input light_entity
          else:
            - service: light.turn_on
              data:
                brightness_pct: !input nightlight_brightness
                transition: 10
              target:
                entity_id: !input light_entity

    # Quiet mode has turned off
    - conditions:
      - condition: trigger
        id: 'quietmode_off'
      - "{{ nightlight_mode == true }}"
      sequence:
        - if:
          - condition: state
            entity_id: !input occupancy_sensor_entity
            state: 'on'
          then:
            - service: light.turn_on
              data:
                brightness_pct: 100
                transition: 10
              target:
                entity_id: !input light_entity
          else:
            - service: light.turn_off
              data:
                transition: 10
              target:
                entity_id: !input light_entity

    # Turn on lights based on occupancy
    - conditions:
      - condition: trigger
        id: 'occupancy_starts'
      # Home occupancy constraint
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.home_occupancy
            state: 'on'
          - "{{ home_occupancy == 'on'}}"
      # Quiet mode constraint
      - condition: or
        conditions:
          - condition: not
            conditions:
              - condition: state
                entity_id: input_select.home_lighting_mode
                state: 'quiet'
          - "{{ quiet_mode == true }}"
      sequence:
        - if:
            - "{{ only_off_mode == false }}"
            - condition: or
              conditions:
                - "{{ ambient_light_mode == false }}"
                - condition: and
                  conditions: 
                    - "{{ ambient_light_mode == true }}"
                    - "{{ (states(ambient_light_sensor) | int) < (ambient_light_limit | int) }}"
          then:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ 'switch.' in light_entity[0] }}"
                  sequence:
                    - service: switch.turn_on
                      data: {}
                      target:
                        entity_id: !input light_entity
              default:
                - service: light.turn_on
                  data:
                    brightness_pct: !input turn_on_brightness
                    transition: !input turn_on_transition
                  target:
                    entity_id: !input light_entity

        # Wait for the sensor to turn off for the delay period
        - wait_for_trigger:
          - platform: state
            entity_id: !input occupancy_sensor_entity
            to: 'off'
            for: !input turn_off_delay
          timeout: !input maximum_run_time

        # Turn off light. Different commands for lights/switches
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ 'switch.' in light_entity[0] }}"
              sequence:
                - service: switch.turn_off
                  data: {}
                  target:
                    entity_id: !input light_entity
          default:
            - if:
              - condition: and
                conditions:
                  - condition: state
                    entity_id: input_select.home_lighting_mode
                    state: 'moonlight'
                  - "{{ moonlight_mode == true }}"
              then:
              - if:
                - condition: template
                  value_template: "{{ moonlight_color == true }}"
                then:
                  - service: light.turn_on
                    data:
                      brightness_pct: "{{ moonlight_brightness }}"
                      hs_color:
                        - "{{ range(360)|random }}"
                        - "{{ range(80,101)|random }}"
                      transition: 10
                    target:
                      entity_id: !input light_entity
                else:
                  - service: light.turn_on
                    data:
                      brightness_pct: "{{ moonlight_brightness }}"
                      transition: 10
                    target:
                      entity_id: !input light_entity
              else:
                - service: light.turn_off
                  data: {}
                  entity_id: !input light_entity

    # Turn on lights based on arrival
    - conditions:
      - condition: trigger
        id: 'arrival'
      - "{{ arrival_light == true }}"
      sequence:
        - service: light.turn_on
          data:
            brightness_pct: !input turn_on_brightness
            transition: !input turn_on_transition
          target:
            entity_id: !input light_entity

        # Wait for doors to open or 45 minutes to elapse
        - wait_for_trigger:
          - platform: state
            entity_id: !input door_entities
            to: 'on'
#          - platform: time
#            for:
#              minutes: 45

        # Turn off light
        - service: light.turn_off
          data: {}
          target:
            entity_id: !input light_entity